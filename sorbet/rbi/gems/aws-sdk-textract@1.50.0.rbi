# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `aws-sdk-textract` gem.
# Please instead update this file by running `bin/tapioca gem aws-sdk-textract`.

# This module provides support for Amazon Textract. This module is available in the
# `aws-sdk-textract` gem.
#
# # Client
#
# The {Client} class provides one method for each API operation. Operation
# methods each accept a hash of request parameters and return a response
# structure.
#
#     textract = Aws::Textract::Client.new
#     resp = textract.analyze_document(params)
#
# See {Client} for more information.
#
# # Errors
#
# Errors returned from Amazon Textract are defined in the
# {Errors} module and all extend {Errors::ServiceError}.
#
#     begin
#       # do stuff
#     rescue Aws::Textract::Errors::ServiceError
#       # rescues all Amazon Textract API errors
#     end
#
# See {Errors} for more information.
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#10
module Aws::Textract; end

# An API client for Textract.  To construct a client, you need to configure a `:region` and `:credentials`.
#
#     client = Aws::Textract::Client.new(
#       region: region_name,
#       credentials: credentials,
#       # ...
#     )
#
# For details on configuring region and credentials see
# the [developer guide](/sdk-for-ruby/v3/developer-guide/setup-config.html).
#
# See {#initialize} for a full list of supported configuration options.
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#52
class Aws::Textract::Client < ::Seahorse::Client::Base
  include ::Aws::ClientStubs

  # @overload initialize
  # @return [Client] a new instance of Client
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#395
  def initialize(*args); end

  # Analyzes an input document for relationships between detected items.
  #
  # The types of information returned are as follows:
  #
  # * Form data (key-value pairs). The related information is returned in
  #   two Block objects, each of type `KEY_VALUE_SET`: a KEY `Block`
  #   object and a VALUE `Block` object. For example, *Name: Ana Silva
  #   Carolina* contains a key and value. *Name:* is the key. *Ana Silva
  #   Carolina* is the value.
  #
  # * Table and table cell data. A TABLE `Block` object contains
  #   information about a detected table. A CELL `Block` object is
  #   returned for each cell in a table.
  #
  # * Lines and words of text. A LINE `Block` object contains one or more
  #   WORD `Block` objects. All lines and words that are detected in the
  #   document are returned (including text that doesn't have a
  #   relationship with the value of `FeatureTypes`).
  #
  # * Signatures. A SIGNATURE `Block` object contains the location
  #   information of a signature in a document. If used in conjunction
  #   with forms or tables, a signature can be given a Key-Value pairing
  #   or be detected in the cell of a table.
  #
  # * Query. A QUERY Block object contains the query text, alias and link
  #   to the associated Query results block object.
  #
  # * Query Result. A QUERY\_RESULT Block object contains the answer to
  #   the query and an ID that connects it to the query asked. This Block
  #   also contains a confidence score.
  #
  # Selection elements such as check boxes and option buttons (radio
  # buttons) can be detected in form data and in tables. A
  # SELECTION\_ELEMENT `Block` object contains information about a
  # selection element, including the selection status.
  #
  # You can choose which type of analysis to perform by specifying the
  # `FeatureTypes` list.
  #
  # The output is returned in a list of `Block` objects.
  #
  # `AnalyzeDocument` is a synchronous operation. To analyze documents
  # asynchronously, use StartDocumentAnalysis.
  #
  # For more information, see [Document Text Analysis][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html
  #
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.blocks #=> Array
  #   resp.blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].confidence #=> Float
  #   resp.blocks[0].text #=> String
  #   resp.blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.blocks[0].row_index #=> Integer
  #   resp.blocks[0].column_index #=> Integer
  #   resp.blocks[0].row_span #=> Integer
  #   resp.blocks[0].column_span #=> Integer
  #   resp.blocks[0].geometry.bounding_box.width #=> Float
  #   resp.blocks[0].geometry.bounding_box.height #=> Float
  #   resp.blocks[0].geometry.bounding_box.left #=> Float
  #   resp.blocks[0].geometry.bounding_box.top #=> Float
  #   resp.blocks[0].geometry.polygon #=> Array
  #   resp.blocks[0].geometry.polygon[0].x #=> Float
  #   resp.blocks[0].geometry.polygon[0].y #=> Float
  #   resp.blocks[0].id #=> String
  #   resp.blocks[0].relationships #=> Array
  #   resp.blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].relationships[0].ids #=> Array
  #   resp.blocks[0].relationships[0].ids[0] #=> String
  #   resp.blocks[0].entity_types #=> Array
  #   resp.blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.blocks[0].page #=> Integer
  #   resp.blocks[0].query.text #=> String
  #   resp.blocks[0].query.alias #=> String
  #   resp.blocks[0].query.pages #=> Array
  #   resp.blocks[0].query.pages[0] #=> String
  #   resp.human_loop_activation_output.human_loop_arn #=> String
  #   resp.human_loop_activation_output.human_loop_activation_reasons #=> Array
  #   resp.human_loop_activation_output.human_loop_activation_reasons[0] #=> String
  #   resp.human_loop_activation_output.human_loop_activation_conditions_evaluation_results #=> String
  #   resp.analyze_document_model_version #=> String
  # @example Request syntax with placeholder values
  #
  #   resp = client.analyze_document({
  #   document: { # required
  #   bytes: "data",
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   feature_types: ["TABLES"], # required, accepts TABLES, FORMS, QUERIES, SIGNATURES
  #   human_loop_config: {
  #   human_loop_name: "HumanLoopName", # required
  #   flow_definition_arn: "FlowDefinitionArn", # required
  #   data_attributes: {
  #   content_classifiers: ["FreeOfPersonallyIdentifiableInformation"], # accepts FreeOfPersonallyIdentifiableInformation, FreeOfAdultContent
  #   },
  #   },
  #   queries_config: {
  #   queries: [ # required
  #   {
  #   text: "QueryInput", # required
  #   alias: "QueryInput",
  #   pages: ["QueryPage"],
  #   },
  #   ],
  #   },
  #   })
  # @option params
  # @option params
  # @option params
  # @option params
  # @overload analyze_document
  # @param params [Hash] ({})
  # @return [Types::AnalyzeDocumentResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::AnalyzeDocumentResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::AnalyzeDocumentResponse#blocks #blocks} => Array&lt;Types::Block&gt;
  #   * {Types::AnalyzeDocumentResponse#human_loop_activation_output #human_loop_activation_output} => Types::HumanLoopActivationOutput
  #   * {Types::AnalyzeDocumentResponse#analyze_document_model_version #analyze_document_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeDocument AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#559
  def analyze_document(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # `AnalyzeExpense` synchronously analyzes an input document for
  # financially related relationships between text.
  #
  # Information is returned as `ExpenseDocuments` and seperated as
  # follows:
  #
  # * `LineItemGroups`- A data set containing `LineItems` which store
  #   information about the lines of text, such as an item purchased and
  #   its price on a receipt.
  #
  # * `SummaryFields`- Contains all other information a receipt, such as
  #   header information or the vendors name.
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.analyze_expense({
  #   document: { # required
  #   bytes: "data",
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   })
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.expense_documents #=> Array
  #   resp.expense_documents[0].expense_index #=> Integer
  #   resp.expense_documents[0].summary_fields #=> Array
  #   resp.expense_documents[0].summary_fields[0].type.text #=> String
  #   resp.expense_documents[0].summary_fields[0].type.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.text #=> String
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.text #=> String
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].page_number #=> Integer
  #   resp.expense_documents[0].summary_fields[0].currency.code #=> String
  #   resp.expense_documents[0].summary_fields[0].currency.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].group_properties #=> Array
  #   resp.expense_documents[0].summary_fields[0].group_properties[0].types #=> Array
  #   resp.expense_documents[0].summary_fields[0].group_properties[0].types[0] #=> String
  #   resp.expense_documents[0].summary_fields[0].group_properties[0].id #=> String
  #   resp.expense_documents[0].line_item_groups #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_item_group_index #=> Integer
  #   resp.expense_documents[0].line_item_groups[0].line_items #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].type.text #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].type.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.text #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.text #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].page_number #=> Integer
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].currency.code #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].currency.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].types #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].types[0] #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].id #=> String
  #   resp.expense_documents[0].blocks #=> Array
  #   resp.expense_documents[0].blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.expense_documents[0].blocks[0].confidence #=> Float
  #   resp.expense_documents[0].blocks[0].text #=> String
  #   resp.expense_documents[0].blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.expense_documents[0].blocks[0].row_index #=> Integer
  #   resp.expense_documents[0].blocks[0].column_index #=> Integer
  #   resp.expense_documents[0].blocks[0].row_span #=> Integer
  #   resp.expense_documents[0].blocks[0].column_span #=> Integer
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.polygon #=> Array
  #   resp.expense_documents[0].blocks[0].geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].blocks[0].id #=> String
  #   resp.expense_documents[0].blocks[0].relationships #=> Array
  #   resp.expense_documents[0].blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.expense_documents[0].blocks[0].relationships[0].ids #=> Array
  #   resp.expense_documents[0].blocks[0].relationships[0].ids[0] #=> String
  #   resp.expense_documents[0].blocks[0].entity_types #=> Array
  #   resp.expense_documents[0].blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.expense_documents[0].blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.expense_documents[0].blocks[0].page #=> Integer
  #   resp.expense_documents[0].blocks[0].query.text #=> String
  #   resp.expense_documents[0].blocks[0].query.alias #=> String
  #   resp.expense_documents[0].blocks[0].query.pages #=> Array
  #   resp.expense_documents[0].blocks[0].query.pages[0] #=> String
  # @option params
  # @overload analyze_expense
  # @param params [Hash] ({})
  # @return [Types::AnalyzeExpenseResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::AnalyzeExpenseResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::AnalyzeExpenseResponse#expense_documents #expense_documents} => Array&lt;Types::ExpenseDocument&gt;
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeExpense AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#718
  def analyze_expense(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Analyzes identity documents for relevant information. This information
  # is extracted and returned as `IdentityDocumentFields`, which records
  # both the normalized field and value of the extracted text. Unlike
  # other Amazon Textract operations, `AnalyzeID` doesn't return any
  # Geometry data.
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.analyze_id({
  #   document_pages: [ # required
  #   {
  #   bytes: "data",
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   ],
  #   })
  # @example Response structure
  #
  #   resp.identity_documents #=> Array
  #   resp.identity_documents[0].document_index #=> Integer
  #   resp.identity_documents[0].identity_document_fields #=> Array
  #   resp.identity_documents[0].identity_document_fields[0].type.text #=> String
  #   resp.identity_documents[0].identity_document_fields[0].type.normalized_value.value #=> String
  #   resp.identity_documents[0].identity_document_fields[0].type.normalized_value.value_type #=> String, one of "DATE"
  #   resp.identity_documents[0].identity_document_fields[0].type.confidence #=> Float
  #   resp.identity_documents[0].identity_document_fields[0].value_detection.text #=> String
  #   resp.identity_documents[0].identity_document_fields[0].value_detection.normalized_value.value #=> String
  #   resp.identity_documents[0].identity_document_fields[0].value_detection.normalized_value.value_type #=> String, one of "DATE"
  #   resp.identity_documents[0].identity_document_fields[0].value_detection.confidence #=> Float
  #   resp.identity_documents[0].blocks #=> Array
  #   resp.identity_documents[0].blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.identity_documents[0].blocks[0].confidence #=> Float
  #   resp.identity_documents[0].blocks[0].text #=> String
  #   resp.identity_documents[0].blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.identity_documents[0].blocks[0].row_index #=> Integer
  #   resp.identity_documents[0].blocks[0].column_index #=> Integer
  #   resp.identity_documents[0].blocks[0].row_span #=> Integer
  #   resp.identity_documents[0].blocks[0].column_span #=> Integer
  #   resp.identity_documents[0].blocks[0].geometry.bounding_box.width #=> Float
  #   resp.identity_documents[0].blocks[0].geometry.bounding_box.height #=> Float
  #   resp.identity_documents[0].blocks[0].geometry.bounding_box.left #=> Float
  #   resp.identity_documents[0].blocks[0].geometry.bounding_box.top #=> Float
  #   resp.identity_documents[0].blocks[0].geometry.polygon #=> Array
  #   resp.identity_documents[0].blocks[0].geometry.polygon[0].x #=> Float
  #   resp.identity_documents[0].blocks[0].geometry.polygon[0].y #=> Float
  #   resp.identity_documents[0].blocks[0].id #=> String
  #   resp.identity_documents[0].blocks[0].relationships #=> Array
  #   resp.identity_documents[0].blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.identity_documents[0].blocks[0].relationships[0].ids #=> Array
  #   resp.identity_documents[0].blocks[0].relationships[0].ids[0] #=> String
  #   resp.identity_documents[0].blocks[0].entity_types #=> Array
  #   resp.identity_documents[0].blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.identity_documents[0].blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.identity_documents[0].blocks[0].page #=> Integer
  #   resp.identity_documents[0].blocks[0].query.text #=> String
  #   resp.identity_documents[0].blocks[0].query.alias #=> String
  #   resp.identity_documents[0].blocks[0].query.pages #=> Array
  #   resp.identity_documents[0].blocks[0].query.pages[0] #=> String
  #   resp.document_metadata.pages #=> Integer
  #   resp.analyze_id_model_version #=> String
  # @option params
  # @overload analyze_id
  # @param params [Hash] ({})
  # @return [Types::AnalyzeIDResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::AnalyzeIDResponse#identity_documents #identity_documents} => Array&lt;Types::IdentityDocument&gt;
  #   * {Types::AnalyzeIDResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::AnalyzeIDResponse#analyze_id_model_version #analyze_id_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeID AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#802
  def analyze_id(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # @api private
  # @param params [{}]
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#2119
  def build_request(operation_name, params = T.unsafe(nil)); end

  # Detects text in the input document. Amazon Textract can detect lines
  # of text and the words that make up a line of text. The input document
  # must be in one of the following image formats: JPEG, PNG, PDF, or
  # TIFF. `DetectDocumentText` returns the detected text in an array of
  # Block objects.
  #
  # Each document page has as an associated `Block` of type PAGE. Each
  # PAGE `Block` object is the parent of LINE `Block` objects that
  # represent the lines of detected text on a page. A LINE `Block` object
  # is a parent for each word that makes up the line. Words are
  # represented by `Block` objects of type WORD.
  #
  # `DetectDocumentText` is a synchronous operation. To analyze documents
  # asynchronously, use StartDocumentTextDetection.
  #
  # For more information, see [Document Text Detection][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.detect_document_text({
  #   document: { # required
  #   bytes: "data",
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   })
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.blocks #=> Array
  #   resp.blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].confidence #=> Float
  #   resp.blocks[0].text #=> String
  #   resp.blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.blocks[0].row_index #=> Integer
  #   resp.blocks[0].column_index #=> Integer
  #   resp.blocks[0].row_span #=> Integer
  #   resp.blocks[0].column_span #=> Integer
  #   resp.blocks[0].geometry.bounding_box.width #=> Float
  #   resp.blocks[0].geometry.bounding_box.height #=> Float
  #   resp.blocks[0].geometry.bounding_box.left #=> Float
  #   resp.blocks[0].geometry.bounding_box.top #=> Float
  #   resp.blocks[0].geometry.polygon #=> Array
  #   resp.blocks[0].geometry.polygon[0].x #=> Float
  #   resp.blocks[0].geometry.polygon[0].y #=> Float
  #   resp.blocks[0].id #=> String
  #   resp.blocks[0].relationships #=> Array
  #   resp.blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].relationships[0].ids #=> Array
  #   resp.blocks[0].relationships[0].ids[0] #=> String
  #   resp.blocks[0].entity_types #=> Array
  #   resp.blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.blocks[0].page #=> Integer
  #   resp.blocks[0].query.text #=> String
  #   resp.blocks[0].query.alias #=> String
  #   resp.blocks[0].query.pages #=> Array
  #   resp.blocks[0].query.pages[0] #=> String
  #   resp.detect_document_text_model_version #=> String
  # @option params
  # @overload detect_document_text
  # @param params [Hash] ({})
  # @return [Types::DetectDocumentTextResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::DetectDocumentTextResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::DetectDocumentTextResponse#blocks #blocks} => Array&lt;Types::Block&gt;
  #   * {Types::DetectDocumentTextResponse#detect_document_text_model_version #detect_document_text_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DetectDocumentText AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#894
  def detect_document_text(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Gets the results for an Amazon Textract asynchronous operation that
  # analyzes text in a document.
  #
  # You start asynchronous text analysis by calling StartDocumentAnalysis,
  # which returns a job identifier (`JobId`). When the text analysis
  # operation finishes, Amazon Textract publishes a completion status to
  # the Amazon Simple Notification Service (Amazon SNS) topic that's
  # registered in the initial call to `StartDocumentAnalysis`. To get the
  # results of the text-detection operation, first check that the status
  # value published to the Amazon SNS topic is `SUCCEEDED`. If so, call
  # `GetDocumentAnalysis`, and pass the job identifier (`JobId`) from the
  # initial call to `StartDocumentAnalysis`.
  #
  # `GetDocumentAnalysis` returns an array of Block objects. The following
  # types of information are returned:
  #
  # * Form data (key-value pairs). The related information is returned in
  #   two Block objects, each of type `KEY_VALUE_SET`: a KEY `Block`
  #   object and a VALUE `Block` object. For example, *Name: Ana Silva
  #   Carolina* contains a key and value. *Name:* is the key. *Ana Silva
  #   Carolina* is the value.
  #
  # * Table and table cell data. A TABLE `Block` object contains
  #   information about a detected table. A CELL `Block` object is
  #   returned for each cell in a table.
  #
  # * Lines and words of text. A LINE `Block` object contains one or more
  #   WORD `Block` objects. All lines and words that are detected in the
  #   document are returned (including text that doesn't have a
  #   relationship with the value of the `StartDocumentAnalysis`
  #   `FeatureTypes` input parameter).
  #
  # * Query. A QUERY Block object contains the query text, alias and link
  #   to the associated Query results block object.
  #
  # * Query Results. A QUERY\_RESULT Block object contains the answer to
  #   the query and an ID that connects it to the query asked. This Block
  #   also contains a confidence score.
  #
  # <note markdown="1"> While processing a document with queries, look out for
  # `INVALID_REQUEST_PARAMETERS` output. This indicates that either the
  # per page query limit has been exceeded or that the operation is trying
  # to query a page in the document which doesn’t exist.
  #
  #  </note>
  #
  # Selection elements such as check boxes and option buttons (radio
  # buttons) can be detected in form data and in tables. A
  # SELECTION\_ELEMENT `Block` object contains information about a
  # selection element, including the selection status.
  #
  # Use the `MaxResults` parameter to limit the number of blocks that are
  # returned. If there are more results than specified in `MaxResults`,
  # the value of `NextToken` in the operation response contains a
  # pagination token for getting the next set of results. To get the next
  # page of results, call `GetDocumentAnalysis`, and populate the
  # `NextToken` request parameter with the token value that's returned
  # from the previous call to `GetDocumentAnalysis`.
  #
  # For more information, see [Document Text Analysis][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html
  #
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.job_status #=> String, one of "IN_PROGRESS", "SUCCEEDED", "FAILED", "PARTIAL_SUCCESS"
  #   resp.next_token #=> String
  #   resp.blocks #=> Array
  #   resp.blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].confidence #=> Float
  #   resp.blocks[0].text #=> String
  #   resp.blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.blocks[0].row_index #=> Integer
  #   resp.blocks[0].column_index #=> Integer
  #   resp.blocks[0].row_span #=> Integer
  #   resp.blocks[0].column_span #=> Integer
  #   resp.blocks[0].geometry.bounding_box.width #=> Float
  #   resp.blocks[0].geometry.bounding_box.height #=> Float
  #   resp.blocks[0].geometry.bounding_box.left #=> Float
  #   resp.blocks[0].geometry.bounding_box.top #=> Float
  #   resp.blocks[0].geometry.polygon #=> Array
  #   resp.blocks[0].geometry.polygon[0].x #=> Float
  #   resp.blocks[0].geometry.polygon[0].y #=> Float
  #   resp.blocks[0].id #=> String
  #   resp.blocks[0].relationships #=> Array
  #   resp.blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].relationships[0].ids #=> Array
  #   resp.blocks[0].relationships[0].ids[0] #=> String
  #   resp.blocks[0].entity_types #=> Array
  #   resp.blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.blocks[0].page #=> Integer
  #   resp.blocks[0].query.text #=> String
  #   resp.blocks[0].query.alias #=> String
  #   resp.blocks[0].query.pages #=> Array
  #   resp.blocks[0].query.pages[0] #=> String
  #   resp.warnings #=> Array
  #   resp.warnings[0].error_code #=> String
  #   resp.warnings[0].pages #=> Array
  #   resp.warnings[0].pages[0] #=> Integer
  #   resp.status_message #=> String
  #   resp.analyze_document_model_version #=> String
  # @example Request syntax with placeholder values
  #
  #   resp = client.get_document_analysis({
  #   job_id: "JobId", # required
  #   max_results: 1,
  #   next_token: "PaginationToken",
  #   })
  # @option params
  # @option params
  # @option params
  # @overload get_document_analysis
  # @param params [Hash] ({})
  # @return [Types::GetDocumentAnalysisResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::GetDocumentAnalysisResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::GetDocumentAnalysisResponse#job_status #job_status} => String
  #   * {Types::GetDocumentAnalysisResponse#next_token #next_token} => String
  #   * {Types::GetDocumentAnalysisResponse#blocks #blocks} => Array&lt;Types::Block&gt;
  #   * {Types::GetDocumentAnalysisResponse#warnings #warnings} => Array&lt;Types::Warning&gt;
  #   * {Types::GetDocumentAnalysisResponse#status_message #status_message} => String
  #   * {Types::GetDocumentAnalysisResponse#analyze_document_model_version #analyze_document_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetDocumentAnalysis AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1044
  def get_document_analysis(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Gets the results for an Amazon Textract asynchronous operation that
  # detects text in a document. Amazon Textract can detect lines of text
  # and the words that make up a line of text.
  #
  # You start asynchronous text detection by calling
  # StartDocumentTextDetection, which returns a job identifier (`JobId`).
  # When the text detection operation finishes, Amazon Textract publishes
  # a completion status to the Amazon Simple Notification Service (Amazon
  # SNS) topic that's registered in the initial call to
  # `StartDocumentTextDetection`. To get the results of the text-detection
  # operation, first check that the status value published to the Amazon
  # SNS topic is `SUCCEEDED`. If so, call `GetDocumentTextDetection`, and
  # pass the job identifier (`JobId`) from the initial call to
  # `StartDocumentTextDetection`.
  #
  # `GetDocumentTextDetection` returns an array of Block objects.
  #
  # Each document page has as an associated `Block` of type PAGE. Each
  # PAGE `Block` object is the parent of LINE `Block` objects that
  # represent the lines of detected text on a page. A LINE `Block` object
  # is a parent for each word that makes up the line. Words are
  # represented by `Block` objects of type WORD.
  #
  # Use the MaxResults parameter to limit the number of blocks that are
  # returned. If there are more results than specified in `MaxResults`,
  # the value of `NextToken` in the operation response contains a
  # pagination token for getting the next set of results. To get the next
  # page of results, call `GetDocumentTextDetection`, and populate the
  # `NextToken` request parameter with the token value that's returned
  # from the previous call to `GetDocumentTextDetection`.
  #
  # For more information, see [Document Text Detection][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html
  #
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.job_status #=> String, one of "IN_PROGRESS", "SUCCEEDED", "FAILED", "PARTIAL_SUCCESS"
  #   resp.next_token #=> String
  #   resp.blocks #=> Array
  #   resp.blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].confidence #=> Float
  #   resp.blocks[0].text #=> String
  #   resp.blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.blocks[0].row_index #=> Integer
  #   resp.blocks[0].column_index #=> Integer
  #   resp.blocks[0].row_span #=> Integer
  #   resp.blocks[0].column_span #=> Integer
  #   resp.blocks[0].geometry.bounding_box.width #=> Float
  #   resp.blocks[0].geometry.bounding_box.height #=> Float
  #   resp.blocks[0].geometry.bounding_box.left #=> Float
  #   resp.blocks[0].geometry.bounding_box.top #=> Float
  #   resp.blocks[0].geometry.polygon #=> Array
  #   resp.blocks[0].geometry.polygon[0].x #=> Float
  #   resp.blocks[0].geometry.polygon[0].y #=> Float
  #   resp.blocks[0].id #=> String
  #   resp.blocks[0].relationships #=> Array
  #   resp.blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.blocks[0].relationships[0].ids #=> Array
  #   resp.blocks[0].relationships[0].ids[0] #=> String
  #   resp.blocks[0].entity_types #=> Array
  #   resp.blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.blocks[0].page #=> Integer
  #   resp.blocks[0].query.text #=> String
  #   resp.blocks[0].query.alias #=> String
  #   resp.blocks[0].query.pages #=> Array
  #   resp.blocks[0].query.pages[0] #=> String
  #   resp.warnings #=> Array
  #   resp.warnings[0].error_code #=> String
  #   resp.warnings[0].pages #=> Array
  #   resp.warnings[0].pages[0] #=> Integer
  #   resp.status_message #=> String
  #   resp.detect_document_text_model_version #=> String
  # @example Request syntax with placeholder values
  #
  #   resp = client.get_document_text_detection({
  #   job_id: "JobId", # required
  #   max_results: 1,
  #   next_token: "PaginationToken",
  #   })
  # @option params
  # @option params
  # @option params
  # @overload get_document_text_detection
  # @param params [Hash] ({})
  # @return [Types::GetDocumentTextDetectionResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::GetDocumentTextDetectionResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::GetDocumentTextDetectionResponse#job_status #job_status} => String
  #   * {Types::GetDocumentTextDetectionResponse#next_token #next_token} => String
  #   * {Types::GetDocumentTextDetectionResponse#blocks #blocks} => Array&lt;Types::Block&gt;
  #   * {Types::GetDocumentTextDetectionResponse#warnings #warnings} => Array&lt;Types::Warning&gt;
  #   * {Types::GetDocumentTextDetectionResponse#status_message #status_message} => String
  #   * {Types::GetDocumentTextDetectionResponse#detect_document_text_model_version #detect_document_text_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetDocumentTextDetection AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1166
  def get_document_text_detection(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Gets the results for an Amazon Textract asynchronous operation that
  # analyzes invoices and receipts. Amazon Textract finds contact
  # information, items purchased, and vendor name, from input invoices and
  # receipts.
  #
  # You start asynchronous invoice/receipt analysis by calling
  # StartExpenseAnalysis, which returns a job identifier (`JobId`). Upon
  # completion of the invoice/receipt analysis, Amazon Textract publishes
  # the completion status to the Amazon Simple Notification Service
  # (Amazon SNS) topic. This topic must be registered in the initial call
  # to `StartExpenseAnalysis`. To get the results of the invoice/receipt
  # analysis operation, first ensure that the status value published to
  # the Amazon SNS topic is `SUCCEEDED`. If so, call `GetExpenseAnalysis`,
  # and pass the job identifier (`JobId`) from the initial call to
  # `StartExpenseAnalysis`.
  #
  # Use the MaxResults parameter to limit the number of blocks that are
  # returned. If there are more results than specified in `MaxResults`,
  # the value of `NextToken` in the operation response contains a
  # pagination token for getting the next set of results. To get the next
  # page of results, call `GetExpenseAnalysis`, and populate the
  # `NextToken` request parameter with the token value that's returned
  # from the previous call to `GetExpenseAnalysis`.
  #
  # For more information, see [Analyzing Invoices and Receipts][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/invoices-receipts.html
  #
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.job_status #=> String, one of "IN_PROGRESS", "SUCCEEDED", "FAILED", "PARTIAL_SUCCESS"
  #   resp.next_token #=> String
  #   resp.expense_documents #=> Array
  #   resp.expense_documents[0].expense_index #=> Integer
  #   resp.expense_documents[0].summary_fields #=> Array
  #   resp.expense_documents[0].summary_fields[0].type.text #=> String
  #   resp.expense_documents[0].summary_fields[0].type.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.text #=> String
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].summary_fields[0].label_detection.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.text #=> String
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].summary_fields[0].value_detection.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].page_number #=> Integer
  #   resp.expense_documents[0].summary_fields[0].currency.code #=> String
  #   resp.expense_documents[0].summary_fields[0].currency.confidence #=> Float
  #   resp.expense_documents[0].summary_fields[0].group_properties #=> Array
  #   resp.expense_documents[0].summary_fields[0].group_properties[0].types #=> Array
  #   resp.expense_documents[0].summary_fields[0].group_properties[0].types[0] #=> String
  #   resp.expense_documents[0].summary_fields[0].group_properties[0].id #=> String
  #   resp.expense_documents[0].line_item_groups #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_item_group_index #=> Integer
  #   resp.expense_documents[0].line_item_groups[0].line_items #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].type.text #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].type.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.text #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.text #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].page_number #=> Integer
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].currency.code #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].currency.confidence #=> Float
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].types #=> Array
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].types[0] #=> String
  #   resp.expense_documents[0].line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].id #=> String
  #   resp.expense_documents[0].blocks #=> Array
  #   resp.expense_documents[0].blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.expense_documents[0].blocks[0].confidence #=> Float
  #   resp.expense_documents[0].blocks[0].text #=> String
  #   resp.expense_documents[0].blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.expense_documents[0].blocks[0].row_index #=> Integer
  #   resp.expense_documents[0].blocks[0].column_index #=> Integer
  #   resp.expense_documents[0].blocks[0].row_span #=> Integer
  #   resp.expense_documents[0].blocks[0].column_span #=> Integer
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.width #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.height #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.left #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.bounding_box.top #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.polygon #=> Array
  #   resp.expense_documents[0].blocks[0].geometry.polygon[0].x #=> Float
  #   resp.expense_documents[0].blocks[0].geometry.polygon[0].y #=> Float
  #   resp.expense_documents[0].blocks[0].id #=> String
  #   resp.expense_documents[0].blocks[0].relationships #=> Array
  #   resp.expense_documents[0].blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.expense_documents[0].blocks[0].relationships[0].ids #=> Array
  #   resp.expense_documents[0].blocks[0].relationships[0].ids[0] #=> String
  #   resp.expense_documents[0].blocks[0].entity_types #=> Array
  #   resp.expense_documents[0].blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.expense_documents[0].blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.expense_documents[0].blocks[0].page #=> Integer
  #   resp.expense_documents[0].blocks[0].query.text #=> String
  #   resp.expense_documents[0].blocks[0].query.alias #=> String
  #   resp.expense_documents[0].blocks[0].query.pages #=> Array
  #   resp.expense_documents[0].blocks[0].query.pages[0] #=> String
  #   resp.warnings #=> Array
  #   resp.warnings[0].error_code #=> String
  #   resp.warnings[0].pages #=> Array
  #   resp.warnings[0].pages[0] #=> Integer
  #   resp.status_message #=> String
  #   resp.analyze_expense_model_version #=> String
  # @example Request syntax with placeholder values
  #
  #   resp = client.get_expense_analysis({
  #   job_id: "JobId", # required
  #   max_results: 1,
  #   next_token: "PaginationToken",
  #   })
  # @option params
  # @option params
  # @option params
  # @overload get_expense_analysis
  # @param params [Hash] ({})
  # @return [Types::GetExpenseAnalysisResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::GetExpenseAnalysisResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::GetExpenseAnalysisResponse#job_status #job_status} => String
  #   * {Types::GetExpenseAnalysisResponse#next_token #next_token} => String
  #   * {Types::GetExpenseAnalysisResponse#expense_documents #expense_documents} => Array&lt;Types::ExpenseDocument&gt;
  #   * {Types::GetExpenseAnalysisResponse#warnings #warnings} => Array&lt;Types::Warning&gt;
  #   * {Types::GetExpenseAnalysisResponse#status_message #status_message} => String
  #   * {Types::GetExpenseAnalysisResponse#analyze_expense_model_version #analyze_expense_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetExpenseAnalysis AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1341
  def get_expense_analysis(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Gets the results for an Amazon Textract asynchronous operation that
  # analyzes text in a lending document.
  #
  # You start asynchronous text analysis by calling
  # `StartLendingAnalysis`, which returns a job identifier (`JobId`). When
  # the text analysis operation finishes, Amazon Textract publishes a
  # completion status to the Amazon Simple Notification Service (Amazon
  # SNS) topic that's registered in the initial call to
  # `StartLendingAnalysis`.
  #
  # To get the results of the text analysis operation, first check that
  # the status value published to the Amazon SNS topic is SUCCEEDED. If
  # so, call GetLendingAnalysis, and pass the job identifier (`JobId`)
  # from the initial call to `StartLendingAnalysis`.
  #
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.job_status #=> String, one of "IN_PROGRESS", "SUCCEEDED", "FAILED", "PARTIAL_SUCCESS"
  #   resp.next_token #=> String
  #   resp.results #=> Array
  #   resp.results[0].page #=> Integer
  #   resp.results[0].page_classification.page_type #=> Array
  #   resp.results[0].page_classification.page_type[0].value #=> String
  #   resp.results[0].page_classification.page_type[0].confidence #=> Float
  #   resp.results[0].page_classification.page_number #=> Array
  #   resp.results[0].page_classification.page_number[0].value #=> String
  #   resp.results[0].page_classification.page_number[0].confidence #=> Float
  #   resp.results[0].extractions #=> Array
  #   resp.results[0].extractions[0].lending_document.lending_fields #=> Array
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].type #=> String
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.text #=> String
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.polygon #=> Array
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].key_detection.confidence #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections #=> Array
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].text #=> String
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.polygon #=> Array
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].lending_document.lending_fields[0].value_detections[0].confidence #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections #=> Array
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].confidence #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.polygon #=> Array
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].lending_document.signature_detections[0].geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].expense_document.expense_index #=> Integer
  #   resp.results[0].extractions[0].expense_document.summary_fields #=> Array
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].type.text #=> String
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].type.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.text #=> String
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.polygon #=> Array
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].label_detection.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.text #=> String
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.polygon #=> Array
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].value_detection.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].page_number #=> Integer
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].currency.code #=> String
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].currency.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].group_properties #=> Array
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].group_properties[0].types #=> Array
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].group_properties[0].types[0] #=> String
  #   resp.results[0].extractions[0].expense_document.summary_fields[0].group_properties[0].id #=> String
  #   resp.results[0].extractions[0].expense_document.line_item_groups #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_item_group_index #=> Integer
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].type.text #=> String
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].type.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.text #=> String
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].label_detection.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.text #=> String
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].value_detection.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].page_number #=> Integer
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].currency.code #=> String
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].currency.confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].types #=> Array
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].types[0] #=> String
  #   resp.results[0].extractions[0].expense_document.line_item_groups[0].line_items[0].line_item_expense_fields[0].group_properties[0].id #=> String
  #   resp.results[0].extractions[0].expense_document.blocks #=> Array
  #   resp.results[0].extractions[0].expense_document.blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.results[0].extractions[0].expense_document.blocks[0].confidence #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].text #=> String
  #   resp.results[0].extractions[0].expense_document.blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.results[0].extractions[0].expense_document.blocks[0].row_index #=> Integer
  #   resp.results[0].extractions[0].expense_document.blocks[0].column_index #=> Integer
  #   resp.results[0].extractions[0].expense_document.blocks[0].row_span #=> Integer
  #   resp.results[0].extractions[0].expense_document.blocks[0].column_span #=> Integer
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.polygon #=> Array
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].expense_document.blocks[0].id #=> String
  #   resp.results[0].extractions[0].expense_document.blocks[0].relationships #=> Array
  #   resp.results[0].extractions[0].expense_document.blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.results[0].extractions[0].expense_document.blocks[0].relationships[0].ids #=> Array
  #   resp.results[0].extractions[0].expense_document.blocks[0].relationships[0].ids[0] #=> String
  #   resp.results[0].extractions[0].expense_document.blocks[0].entity_types #=> Array
  #   resp.results[0].extractions[0].expense_document.blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.results[0].extractions[0].expense_document.blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.results[0].extractions[0].expense_document.blocks[0].page #=> Integer
  #   resp.results[0].extractions[0].expense_document.blocks[0].query.text #=> String
  #   resp.results[0].extractions[0].expense_document.blocks[0].query.alias #=> String
  #   resp.results[0].extractions[0].expense_document.blocks[0].query.pages #=> Array
  #   resp.results[0].extractions[0].expense_document.blocks[0].query.pages[0] #=> String
  #   resp.results[0].extractions[0].identity_document.document_index #=> Integer
  #   resp.results[0].extractions[0].identity_document.identity_document_fields #=> Array
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].type.text #=> String
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].type.normalized_value.value #=> String
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].type.normalized_value.value_type #=> String, one of "DATE"
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].type.confidence #=> Float
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].value_detection.text #=> String
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].value_detection.normalized_value.value #=> String
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].value_detection.normalized_value.value_type #=> String, one of "DATE"
  #   resp.results[0].extractions[0].identity_document.identity_document_fields[0].value_detection.confidence #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks #=> Array
  #   resp.results[0].extractions[0].identity_document.blocks[0].block_type #=> String, one of "KEY_VALUE_SET", "PAGE", "LINE", "WORD", "TABLE", "CELL", "SELECTION_ELEMENT", "MERGED_CELL", "TITLE", "QUERY", "QUERY_RESULT", "SIGNATURE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.results[0].extractions[0].identity_document.blocks[0].confidence #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].text #=> String
  #   resp.results[0].extractions[0].identity_document.blocks[0].text_type #=> String, one of "HANDWRITING", "PRINTED"
  #   resp.results[0].extractions[0].identity_document.blocks[0].row_index #=> Integer
  #   resp.results[0].extractions[0].identity_document.blocks[0].column_index #=> Integer
  #   resp.results[0].extractions[0].identity_document.blocks[0].row_span #=> Integer
  #   resp.results[0].extractions[0].identity_document.blocks[0].column_span #=> Integer
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.bounding_box.width #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.bounding_box.height #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.bounding_box.left #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.bounding_box.top #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.polygon #=> Array
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.polygon[0].x #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].geometry.polygon[0].y #=> Float
  #   resp.results[0].extractions[0].identity_document.blocks[0].id #=> String
  #   resp.results[0].extractions[0].identity_document.blocks[0].relationships #=> Array
  #   resp.results[0].extractions[0].identity_document.blocks[0].relationships[0].type #=> String, one of "VALUE", "CHILD", "COMPLEX_FEATURES", "MERGED_CELL", "TITLE", "ANSWER", "TABLE", "TABLE_TITLE", "TABLE_FOOTER"
  #   resp.results[0].extractions[0].identity_document.blocks[0].relationships[0].ids #=> Array
  #   resp.results[0].extractions[0].identity_document.blocks[0].relationships[0].ids[0] #=> String
  #   resp.results[0].extractions[0].identity_document.blocks[0].entity_types #=> Array
  #   resp.results[0].extractions[0].identity_document.blocks[0].entity_types[0] #=> String, one of "KEY", "VALUE", "COLUMN_HEADER", "TABLE_TITLE", "TABLE_FOOTER", "TABLE_SECTION_TITLE", "TABLE_SUMMARY", "STRUCTURED_TABLE", "SEMI_STRUCTURED_TABLE"
  #   resp.results[0].extractions[0].identity_document.blocks[0].selection_status #=> String, one of "SELECTED", "NOT_SELECTED"
  #   resp.results[0].extractions[0].identity_document.blocks[0].page #=> Integer
  #   resp.results[0].extractions[0].identity_document.blocks[0].query.text #=> String
  #   resp.results[0].extractions[0].identity_document.blocks[0].query.alias #=> String
  #   resp.results[0].extractions[0].identity_document.blocks[0].query.pages #=> Array
  #   resp.results[0].extractions[0].identity_document.blocks[0].query.pages[0] #=> String
  #   resp.warnings #=> Array
  #   resp.warnings[0].error_code #=> String
  #   resp.warnings[0].pages #=> Array
  #   resp.warnings[0].pages[0] #=> Integer
  #   resp.status_message #=> String
  #   resp.analyze_lending_model_version #=> String
  # @example Request syntax with placeholder values
  #
  #   resp = client.get_lending_analysis({
  #   job_id: "JobId", # required
  #   max_results: 1,
  #   next_token: "PaginationToken",
  #   })
  # @option params
  # @option params
  # @option params
  # @overload get_lending_analysis
  # @param params [Hash] ({})
  # @return [Types::GetLendingAnalysisResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::GetLendingAnalysisResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::GetLendingAnalysisResponse#job_status #job_status} => String
  #   * {Types::GetLendingAnalysisResponse#next_token #next_token} => String
  #   * {Types::GetLendingAnalysisResponse#results #results} => Array&lt;Types::LendingResult&gt;
  #   * {Types::GetLendingAnalysisResponse#warnings #warnings} => Array&lt;Types::Warning&gt;
  #   * {Types::GetLendingAnalysisResponse#status_message #status_message} => String
  #   * {Types::GetLendingAnalysisResponse#analyze_lending_model_version #analyze_lending_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetLendingAnalysis AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1580
  def get_lending_analysis(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Gets summarized results for the `StartLendingAnalysis` operation,
  # which analyzes text in a lending document. The returned summary
  # consists of information about documents grouped together by a common
  # document type. Information like detected signatures, page numbers, and
  # split documents is returned with respect to the type of grouped
  # document.
  #
  # You start asynchronous text analysis by calling
  # `StartLendingAnalysis`, which returns a job identifier (`JobId`). When
  # the text analysis operation finishes, Amazon Textract publishes a
  # completion status to the Amazon Simple Notification Service (Amazon
  # SNS) topic that's registered in the initial call to
  # `StartLendingAnalysis`.
  #
  # To get the results of the text analysis operation, first check that
  # the status value published to the Amazon SNS topic is SUCCEEDED. If
  # so, call `GetLendingAnalysisSummary`, and pass the job identifier
  # (`JobId`) from the initial call to `StartLendingAnalysis`.
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.get_lending_analysis_summary({
  #   job_id: "JobId", # required
  #   })
  # @example Response structure
  #
  #   resp.document_metadata.pages #=> Integer
  #   resp.job_status #=> String, one of "IN_PROGRESS", "SUCCEEDED", "FAILED", "PARTIAL_SUCCESS"
  #   resp.summary.document_groups #=> Array
  #   resp.summary.document_groups[0].type #=> String
  #   resp.summary.document_groups[0].split_documents #=> Array
  #   resp.summary.document_groups[0].split_documents[0].index #=> Integer
  #   resp.summary.document_groups[0].split_documents[0].pages #=> Array
  #   resp.summary.document_groups[0].split_documents[0].pages[0] #=> Integer
  #   resp.summary.document_groups[0].detected_signatures #=> Array
  #   resp.summary.document_groups[0].detected_signatures[0].page #=> Integer
  #   resp.summary.document_groups[0].undetected_signatures #=> Array
  #   resp.summary.document_groups[0].undetected_signatures[0].page #=> Integer
  #   resp.summary.undetected_document_types #=> Array
  #   resp.summary.undetected_document_types[0] #=> String
  #   resp.warnings #=> Array
  #   resp.warnings[0].error_code #=> String
  #   resp.warnings[0].pages #=> Array
  #   resp.warnings[0].pages[0] #=> Integer
  #   resp.status_message #=> String
  #   resp.analyze_lending_model_version #=> String
  # @option params
  # @overload get_lending_analysis_summary
  # @param params [Hash] ({})
  # @return [Types::GetLendingAnalysisSummaryResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::GetLendingAnalysisSummaryResponse#document_metadata #document_metadata} => Types::DocumentMetadata
  #   * {Types::GetLendingAnalysisSummaryResponse#job_status #job_status} => String
  #   * {Types::GetLendingAnalysisSummaryResponse#summary #summary} => Types::LendingSummary
  #   * {Types::GetLendingAnalysisSummaryResponse#warnings #warnings} => Array&lt;Types::Warning&gt;
  #   * {Types::GetLendingAnalysisSummaryResponse#status_message #status_message} => String
  #   * {Types::GetLendingAnalysisSummaryResponse#analyze_lending_model_version #analyze_lending_model_version} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetLendingAnalysisSummary AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1651
  def get_lending_analysis_summary(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts the asynchronous analysis of an input document for
  # relationships between detected items such as key-value pairs, tables,
  # and selection elements.
  #
  # `StartDocumentAnalysis` can analyze text in documents that are in
  # JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon
  # S3 bucket. Use DocumentLocation to specify the bucket name and file
  # name of the document.
  #
  # `StartDocumentAnalysis` returns a job identifier (`JobId`) that you
  # use to get the results of the operation. When text analysis is
  # finished, Amazon Textract publishes a completion status to the Amazon
  # Simple Notification Service (Amazon SNS) topic that you specify in
  # `NotificationChannel`. To get the results of the text analysis
  # operation, first check that the status value published to the Amazon
  # SNS topic is `SUCCEEDED`. If so, call GetDocumentAnalysis, and pass
  # the job identifier (`JobId`) from the initial call to
  # `StartDocumentAnalysis`.
  #
  # For more information, see [Document Text Analysis][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html
  #
  # @example Response structure
  #
  #   resp.job_id #=> String
  # @example Request syntax with placeholder values
  #
  #   resp = client.start_document_analysis({
  #   document_location: { # required
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   feature_types: ["TABLES"], # required, accepts TABLES, FORMS, QUERIES, SIGNATURES
  #   client_request_token: "ClientRequestToken",
  #   job_tag: "JobTag",
  #   notification_channel: {
  #   sns_topic_arn: "SNSTopicArn", # required
  #   role_arn: "RoleArn", # required
  #   },
  #   output_config: {
  #   s3_bucket: "S3Bucket", # required
  #   s3_prefix: "S3ObjectName",
  #   },
  #   kms_key_id: "KMSKeyId",
  #   queries_config: {
  #   queries: [ # required
  #   {
  #   text: "QueryInput", # required
  #   alias: "QueryInput",
  #   pages: ["QueryPage"],
  #   },
  #   ],
  #   },
  #   })
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @overload start_document_analysis
  # @param params [Hash] ({})
  # @return [Types::StartDocumentAnalysisResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::StartDocumentAnalysisResponse#job_id #job_id} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentAnalysis AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1772
  def start_document_analysis(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts the asynchronous detection of text in a document. Amazon
  # Textract can detect lines of text and the words that make up a line of
  # text.
  #
  # `StartDocumentTextDetection` can analyze text in documents that are in
  # JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon
  # S3 bucket. Use DocumentLocation to specify the bucket name and file
  # name of the document.
  #
  # `StartTextDetection` returns a job identifier (`JobId`) that you use
  # to get the results of the operation. When text detection is finished,
  # Amazon Textract publishes a completion status to the Amazon Simple
  # Notification Service (Amazon SNS) topic that you specify in
  # `NotificationChannel`. To get the results of the text detection
  # operation, first check that the status value published to the Amazon
  # SNS topic is `SUCCEEDED`. If so, call GetDocumentTextDetection, and
  # pass the job identifier (`JobId`) from the initial call to
  # `StartDocumentTextDetection`.
  #
  # For more information, see [Document Text Detection][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.start_document_text_detection({
  #   document_location: { # required
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   client_request_token: "ClientRequestToken",
  #   job_tag: "JobTag",
  #   notification_channel: {
  #   sns_topic_arn: "SNSTopicArn", # required
  #   role_arn: "RoleArn", # required
  #   },
  #   output_config: {
  #   s3_bucket: "S3Bucket", # required
  #   s3_prefix: "S3ObjectName",
  #   },
  #   kms_key_id: "KMSKeyId",
  #   })
  # @example Response structure
  #
  #   resp.job_id #=> String
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @overload start_document_text_detection
  # @param params [Hash] ({})
  # @return [Types::StartDocumentTextDetectionResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::StartDocumentTextDetectionResponse#job_id #job_id} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentTextDetection AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1874
  def start_document_text_detection(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts the asynchronous analysis of invoices or receipts for data like
  # contact information, items purchased, and vendor names.
  #
  # `StartExpenseAnalysis` can analyze text in documents that are in JPEG,
  # PNG, and PDF format. The documents must be stored in an Amazon S3
  # bucket. Use the DocumentLocation parameter to specify the name of your
  # S3 bucket and the name of the document in that bucket.
  #
  # `StartExpenseAnalysis` returns a job identifier (`JobId`) that you
  # will provide to `GetExpenseAnalysis` to retrieve the results of the
  # operation. When the analysis of the input invoices/receipts is
  # finished, Amazon Textract publishes a completion status to the Amazon
  # Simple Notification Service (Amazon SNS) topic that you provide to the
  # `NotificationChannel`. To obtain the results of the invoice and
  # receipt analysis operation, ensure that the status value published to
  # the Amazon SNS topic is `SUCCEEDED`. If so, call GetExpenseAnalysis,
  # and pass the job identifier (`JobId`) that was returned by your call
  # to `StartExpenseAnalysis`.
  #
  # For more information, see [Analyzing Invoices and Receipts][1].
  #
  #
  #
  # [1]: https://docs.aws.amazon.com/textract/latest/dg/invoice-receipts.html
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.start_expense_analysis({
  #   document_location: { # required
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   client_request_token: "ClientRequestToken",
  #   job_tag: "JobTag",
  #   notification_channel: {
  #   sns_topic_arn: "SNSTopicArn", # required
  #   role_arn: "RoleArn", # required
  #   },
  #   output_config: {
  #   s3_bucket: "S3Bucket", # required
  #   s3_prefix: "S3ObjectName",
  #   },
  #   kms_key_id: "KMSKeyId",
  #   })
  # @example Response structure
  #
  #   resp.job_id #=> String
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @overload start_expense_analysis
  # @param params [Hash] ({})
  # @return [Types::StartExpenseAnalysisResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::StartExpenseAnalysisResponse#job_id #job_id} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartExpenseAnalysis AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#1976
  def start_expense_analysis(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts the classification and analysis of an input document.
  # `StartLendingAnalysis` initiates the classification and analysis of a
  # packet of lending documents. `StartLendingAnalysis` operates on a
  # document file located in an Amazon S3 bucket.
  #
  # `StartLendingAnalysis` can analyze text in documents that are in one
  # of the following formats: JPEG, PNG, TIFF, PDF. Use `DocumentLocation`
  # to specify the bucket name and the file name of the document.
  #
  # `StartLendingAnalysis` returns a job identifier (`JobId`) that you use
  # to get the results of the operation. When the text analysis is
  # finished, Amazon Textract publishes a completion status to the Amazon
  # Simple Notification Service (Amazon SNS) topic that you specify in
  # `NotificationChannel`. To get the results of the text analysis
  # operation, first check that the status value published to the Amazon
  # SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either
  # `GetLendingAnalysis` or `GetLendingAnalysisSummary` and provide the
  # `JobId` to obtain the results of the analysis.
  #
  # If using `OutputConfig` to specify an Amazon S3 bucket, the output
  # will be contained within the specified prefix in a directory labeled
  # with the job-id. In the directory there are 3 sub-directories:
  #
  # * detailedResponse (contains the GetLendingAnalysis response)
  #
  # * summaryResponse (for the GetLendingAnalysisSummary response)
  #
  # * splitDocuments (documents split across logical boundaries)
  #
  # @example Request syntax with placeholder values
  #
  #   resp = client.start_lending_analysis({
  #   document_location: { # required
  #   s3_object: {
  #   bucket: "S3Bucket",
  #   name: "S3ObjectName",
  #   version: "S3ObjectVersion",
  #   },
  #   },
  #   client_request_token: "ClientRequestToken",
  #   job_tag: "JobTag",
  #   notification_channel: {
  #   sns_topic_arn: "SNSTopicArn", # required
  #   role_arn: "RoleArn", # required
  #   },
  #   output_config: {
  #   s3_bucket: "S3Bucket", # required
  #   s3_prefix: "S3ObjectName",
  #   },
  #   kms_key_id: "KMSKeyId",
  #   })
  # @example Response structure
  #
  #   resp.job_id #=> String
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @option params
  # @overload start_lending_analysis
  # @param params [Hash] ({})
  # @return [Types::StartLendingAnalysisResponse] Returns a {Seahorse::Client::Response response} object which responds to the following methods:
  #
  #   * {Types::StartLendingAnalysisResponse#job_id #job_id} => String
  # @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartLendingAnalysis AWS API Documentation
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#2110
  def start_lending_analysis(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # @api private
  # @deprecated
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#2134
  def waiter_names; end

  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#2144
    def errors_module; end

    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/client.rb#2141
    def identifier; end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#12
module Aws::Textract::ClientApi
  include ::Seahorse::Model
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#610
Aws::Textract::ClientApi::API = T.let(T.unsafe(nil), Seahorse::Model::Api)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#16
Aws::Textract::ClientApi::AccessDeniedException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#17
Aws::Textract::ClientApi::AnalyzeDocumentRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#18
Aws::Textract::ClientApi::AnalyzeDocumentResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#19
Aws::Textract::ClientApi::AnalyzeExpenseRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#20
Aws::Textract::ClientApi::AnalyzeExpenseResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#21
Aws::Textract::ClientApi::AnalyzeIDDetections = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#22
Aws::Textract::ClientApi::AnalyzeIDRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#23
Aws::Textract::ClientApi::AnalyzeIDResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#24
Aws::Textract::ClientApi::BadDocumentException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#25
Aws::Textract::ClientApi::Block = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#26
Aws::Textract::ClientApi::BlockList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#27
Aws::Textract::ClientApi::BlockType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#28
Aws::Textract::ClientApi::BoundingBox = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#29
Aws::Textract::ClientApi::ClientRequestToken = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#30
Aws::Textract::ClientApi::ContentClassifier = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#31
Aws::Textract::ClientApi::ContentClassifiers = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#32
Aws::Textract::ClientApi::DetectDocumentTextRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#33
Aws::Textract::ClientApi::DetectDocumentTextResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#34
Aws::Textract::ClientApi::DetectedSignature = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#35
Aws::Textract::ClientApi::DetectedSignatureList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#36
Aws::Textract::ClientApi::Document = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#37
Aws::Textract::ClientApi::DocumentGroup = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#38
Aws::Textract::ClientApi::DocumentGroupList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#39
Aws::Textract::ClientApi::DocumentLocation = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#40
Aws::Textract::ClientApi::DocumentMetadata = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#41
Aws::Textract::ClientApi::DocumentPages = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#42
Aws::Textract::ClientApi::DocumentTooLargeException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#43
Aws::Textract::ClientApi::EntityType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#44
Aws::Textract::ClientApi::EntityTypes = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#45
Aws::Textract::ClientApi::ErrorCode = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#46
Aws::Textract::ClientApi::ExpenseCurrency = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#47
Aws::Textract::ClientApi::ExpenseDetection = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#48
Aws::Textract::ClientApi::ExpenseDocument = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#49
Aws::Textract::ClientApi::ExpenseDocumentList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#50
Aws::Textract::ClientApi::ExpenseField = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#51
Aws::Textract::ClientApi::ExpenseFieldList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#52
Aws::Textract::ClientApi::ExpenseGroupProperty = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#53
Aws::Textract::ClientApi::ExpenseGroupPropertyList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#54
Aws::Textract::ClientApi::ExpenseType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#55
Aws::Textract::ClientApi::Extraction = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#56
Aws::Textract::ClientApi::ExtractionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#57
Aws::Textract::ClientApi::FeatureType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#58
Aws::Textract::ClientApi::FeatureTypes = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#59
Aws::Textract::ClientApi::Float = T.let(T.unsafe(nil), Seahorse::Model::Shapes::FloatShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#60
Aws::Textract::ClientApi::FlowDefinitionArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#61
Aws::Textract::ClientApi::Geometry = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#62
Aws::Textract::ClientApi::GetDocumentAnalysisRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#63
Aws::Textract::ClientApi::GetDocumentAnalysisResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#64
Aws::Textract::ClientApi::GetDocumentTextDetectionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#65
Aws::Textract::ClientApi::GetDocumentTextDetectionResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#66
Aws::Textract::ClientApi::GetExpenseAnalysisRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#67
Aws::Textract::ClientApi::GetExpenseAnalysisResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#68
Aws::Textract::ClientApi::GetLendingAnalysisRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#69
Aws::Textract::ClientApi::GetLendingAnalysisResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#70
Aws::Textract::ClientApi::GetLendingAnalysisSummaryRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#71
Aws::Textract::ClientApi::GetLendingAnalysisSummaryResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#72
Aws::Textract::ClientApi::HumanLoopActivationConditionsEvaluationResults = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#73
Aws::Textract::ClientApi::HumanLoopActivationOutput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#74
Aws::Textract::ClientApi::HumanLoopActivationReason = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#75
Aws::Textract::ClientApi::HumanLoopActivationReasons = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#76
Aws::Textract::ClientApi::HumanLoopArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#77
Aws::Textract::ClientApi::HumanLoopConfig = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#78
Aws::Textract::ClientApi::HumanLoopDataAttributes = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#79
Aws::Textract::ClientApi::HumanLoopName = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#80
Aws::Textract::ClientApi::HumanLoopQuotaExceededException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#81
Aws::Textract::ClientApi::IdList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#82
Aws::Textract::ClientApi::IdempotentParameterMismatchException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#83
Aws::Textract::ClientApi::IdentityDocument = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#84
Aws::Textract::ClientApi::IdentityDocumentField = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#85
Aws::Textract::ClientApi::IdentityDocumentFieldList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#86
Aws::Textract::ClientApi::IdentityDocumentList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#87
Aws::Textract::ClientApi::ImageBlob = T.let(T.unsafe(nil), Seahorse::Model::Shapes::BlobShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#88
Aws::Textract::ClientApi::InternalServerError = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#89
Aws::Textract::ClientApi::InvalidJobIdException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#90
Aws::Textract::ClientApi::InvalidKMSKeyException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#91
Aws::Textract::ClientApi::InvalidParameterException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#92
Aws::Textract::ClientApi::InvalidS3ObjectException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#93
Aws::Textract::ClientApi::JobId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#94
Aws::Textract::ClientApi::JobStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#95
Aws::Textract::ClientApi::JobTag = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#96
Aws::Textract::ClientApi::KMSKeyId = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#97
Aws::Textract::ClientApi::LendingDetection = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#98
Aws::Textract::ClientApi::LendingDetectionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#99
Aws::Textract::ClientApi::LendingDocument = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#100
Aws::Textract::ClientApi::LendingField = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#101
Aws::Textract::ClientApi::LendingFieldList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#102
Aws::Textract::ClientApi::LendingResult = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#103
Aws::Textract::ClientApi::LendingResultList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#104
Aws::Textract::ClientApi::LendingSummary = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#105
Aws::Textract::ClientApi::LimitExceededException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#106
Aws::Textract::ClientApi::LineItemFields = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#107
Aws::Textract::ClientApi::LineItemGroup = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#108
Aws::Textract::ClientApi::LineItemGroupList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#109
Aws::Textract::ClientApi::LineItemList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#110
Aws::Textract::ClientApi::MaxResults = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#111
Aws::Textract::ClientApi::NonEmptyString = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#112
Aws::Textract::ClientApi::NormalizedValue = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#113
Aws::Textract::ClientApi::NotificationChannel = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#114
Aws::Textract::ClientApi::OutputConfig = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#115
Aws::Textract::ClientApi::PageClassification = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#116
Aws::Textract::ClientApi::PageList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#117
Aws::Textract::ClientApi::Pages = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#118
Aws::Textract::ClientApi::PaginationToken = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#119
Aws::Textract::ClientApi::Percent = T.let(T.unsafe(nil), Seahorse::Model::Shapes::FloatShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#120
Aws::Textract::ClientApi::Point = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#121
Aws::Textract::ClientApi::Polygon = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#122
Aws::Textract::ClientApi::Prediction = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#123
Aws::Textract::ClientApi::PredictionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#124
Aws::Textract::ClientApi::ProvisionedThroughputExceededException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#125
Aws::Textract::ClientApi::Queries = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#126
Aws::Textract::ClientApi::QueriesConfig = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#127
Aws::Textract::ClientApi::Query = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#128
Aws::Textract::ClientApi::QueryInput = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#129
Aws::Textract::ClientApi::QueryPage = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#130
Aws::Textract::ClientApi::QueryPages = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#131
Aws::Textract::ClientApi::Relationship = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#132
Aws::Textract::ClientApi::RelationshipList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#133
Aws::Textract::ClientApi::RelationshipType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#134
Aws::Textract::ClientApi::RoleArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#135
Aws::Textract::ClientApi::S3Bucket = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#136
Aws::Textract::ClientApi::S3Object = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#137
Aws::Textract::ClientApi::S3ObjectName = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#138
Aws::Textract::ClientApi::S3ObjectVersion = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#139
Aws::Textract::ClientApi::SNSTopicArn = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#140
Aws::Textract::ClientApi::SelectionStatus = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#141
Aws::Textract::ClientApi::SignatureDetection = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#142
Aws::Textract::ClientApi::SignatureDetectionList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#143
Aws::Textract::ClientApi::SplitDocument = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#144
Aws::Textract::ClientApi::SplitDocumentList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#145
Aws::Textract::ClientApi::StartDocumentAnalysisRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#146
Aws::Textract::ClientApi::StartDocumentAnalysisResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#147
Aws::Textract::ClientApi::StartDocumentTextDetectionRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#148
Aws::Textract::ClientApi::StartDocumentTextDetectionResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#149
Aws::Textract::ClientApi::StartExpenseAnalysisRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#150
Aws::Textract::ClientApi::StartExpenseAnalysisResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#151
Aws::Textract::ClientApi::StartLendingAnalysisRequest = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#152
Aws::Textract::ClientApi::StartLendingAnalysisResponse = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#153
Aws::Textract::ClientApi::StatusMessage = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#154
Aws::Textract::ClientApi::String = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#155
Aws::Textract::ClientApi::StringList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#156
Aws::Textract::ClientApi::TextType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#157
Aws::Textract::ClientApi::ThrottlingException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#158
Aws::Textract::ClientApi::UInteger = T.let(T.unsafe(nil), Seahorse::Model::Shapes::IntegerShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#159
Aws::Textract::ClientApi::UndetectedDocumentTypeList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#160
Aws::Textract::ClientApi::UndetectedSignature = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#161
Aws::Textract::ClientApi::UndetectedSignatureList = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#162
Aws::Textract::ClientApi::UnsupportedDocumentException = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#163
Aws::Textract::ClientApi::ValueType = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StringShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#164
Aws::Textract::ClientApi::Warning = T.let(T.unsafe(nil), Seahorse::Model::Shapes::StructureShape)

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/client_api.rb#165
Aws::Textract::ClientApi::Warnings = T.let(T.unsafe(nil), Seahorse::Model::Shapes::ListShape)

# Endpoint parameters used to influence endpoints per request.
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoint_parameters.rb#33
class Aws::Textract::EndpointParameters < ::Struct
  include ::Aws::Structure

  # @return [EndpointParameters] a new instance of EndpointParameters
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/endpoint_parameters.rb#51
  def initialize(options = T.unsafe(nil)); end

  # Override the endpoint used to send this request
  #
  # @return [String]
  def endpoint; end

  # Override the endpoint used to send this request
  #
  # @return [String]
  def endpoint=(_); end

  # The AWS region used to dispatch the request.
  #
  # @return [String]
  def region; end

  # The AWS region used to dispatch the request.
  #
  # @return [String]
  def region=(_); end

  # When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.
  #
  # @return [Boolean]
  def use_dual_stack; end

  # When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.
  #
  # @return [Boolean]
  def use_dual_stack=(_); end

  # When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.
  #
  # @return [Boolean]
  def use_fips; end

  # When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.
  #
  # @return [Boolean]
  def use_fips=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/endpoint_provider.rb#11
class Aws::Textract::EndpointProvider
  # @raise [ArgumentError]
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/endpoint_provider.rb#12
  def resolve_endpoint(parameters); end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#13
module Aws::Textract::Endpoints; end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#15
class Aws::Textract::Endpoints::AnalyzeDocument
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#16
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#29
class Aws::Textract::Endpoints::AnalyzeExpense
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#30
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#43
class Aws::Textract::Endpoints::AnalyzeID
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#44
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#57
class Aws::Textract::Endpoints::DetectDocumentText
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#58
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#71
class Aws::Textract::Endpoints::GetDocumentAnalysis
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#72
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#85
class Aws::Textract::Endpoints::GetDocumentTextDetection
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#86
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#99
class Aws::Textract::Endpoints::GetExpenseAnalysis
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#100
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#113
class Aws::Textract::Endpoints::GetLendingAnalysis
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#114
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#127
class Aws::Textract::Endpoints::GetLendingAnalysisSummary
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#128
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#141
class Aws::Textract::Endpoints::StartDocumentAnalysis
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#142
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#155
class Aws::Textract::Endpoints::StartDocumentTextDetection
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#156
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#169
class Aws::Textract::Endpoints::StartExpenseAnalysis
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#170
    def build(context); end
  end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#183
class Aws::Textract::Endpoints::StartLendingAnalysis
  class << self
    # @api private
    #
    # source://aws-sdk-textract//lib/aws-sdk-textract/endpoints.rb#184
    def build(context); end
  end
end

# When Textract returns an error response, the Ruby SDK constructs and raises an error.
# These errors all extend Aws::Textract::Errors::ServiceError < {Aws::Errors::ServiceError}
#
# You can rescue all Textract errors using ServiceError:
#
#     begin
#       # do stuff
#     rescue Aws::Textract::Errors::ServiceError
#       # rescues all Textract API errors
#     end
#
#
# ## Request Context
# ServiceError objects have a {Aws::Errors::ServiceError#context #context} method that returns
# information about the request that generated the error.
# See {Seahorse::Client::RequestContext} for more information.
#
# ## Error Classes
# * {AccessDeniedException}
# * {BadDocumentException}
# * {DocumentTooLargeException}
# * {HumanLoopQuotaExceededException}
# * {IdempotentParameterMismatchException}
# * {InternalServerError}
# * {InvalidJobIdException}
# * {InvalidKMSKeyException}
# * {InvalidParameterException}
# * {InvalidS3ObjectException}
# * {LimitExceededException}
# * {ProvisionedThroughputExceededException}
# * {ThrottlingException}
# * {UnsupportedDocumentException}
#
# Additionally, error classes are dynamically generated for service errors based on the error code
# if they are not defined above.
#
# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#47
module Aws::Textract::Errors
  extend ::Aws::Errors::DynamicErrors
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#51
class Aws::Textract::Errors::AccessDeniedException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::AccessDeniedException]
  # @return [AccessDeniedException] a new instance of AccessDeniedException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#56
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#61
class Aws::Textract::Errors::BadDocumentException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::BadDocumentException]
  # @return [BadDocumentException] a new instance of BadDocumentException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#66
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#71
class Aws::Textract::Errors::DocumentTooLargeException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::DocumentTooLargeException]
  # @return [DocumentTooLargeException] a new instance of DocumentTooLargeException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#76
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#81
class Aws::Textract::Errors::HumanLoopQuotaExceededException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::HumanLoopQuotaExceededException]
  # @return [HumanLoopQuotaExceededException] a new instance of HumanLoopQuotaExceededException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#86
  def initialize(context, message, data = T.unsafe(nil)); end

  # @return [String]
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#96
  def quota_code; end

  # @return [String]
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#91
  def resource_type; end

  # @return [String]
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#101
  def service_code; end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#106
class Aws::Textract::Errors::IdempotentParameterMismatchException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::IdempotentParameterMismatchException]
  # @return [IdempotentParameterMismatchException] a new instance of IdempotentParameterMismatchException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#111
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#116
class Aws::Textract::Errors::InternalServerError < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::InternalServerError]
  # @return [InternalServerError] a new instance of InternalServerError
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#121
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#126
class Aws::Textract::Errors::InvalidJobIdException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::InvalidJobIdException]
  # @return [InvalidJobIdException] a new instance of InvalidJobIdException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#131
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#136
class Aws::Textract::Errors::InvalidKMSKeyException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::InvalidKMSKeyException]
  # @return [InvalidKMSKeyException] a new instance of InvalidKMSKeyException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#141
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#146
class Aws::Textract::Errors::InvalidParameterException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::InvalidParameterException]
  # @return [InvalidParameterException] a new instance of InvalidParameterException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#151
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#156
class Aws::Textract::Errors::InvalidS3ObjectException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::InvalidS3ObjectException]
  # @return [InvalidS3ObjectException] a new instance of InvalidS3ObjectException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#161
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#166
class Aws::Textract::Errors::LimitExceededException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::LimitExceededException]
  # @return [LimitExceededException] a new instance of LimitExceededException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#171
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#176
class Aws::Textract::Errors::ProvisionedThroughputExceededException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::ProvisionedThroughputExceededException]
  # @return [ProvisionedThroughputExceededException] a new instance of ProvisionedThroughputExceededException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#181
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#0
class Aws::Textract::Errors::ServiceError < ::Aws::Errors::ServiceError; end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#186
class Aws::Textract::Errors::ThrottlingException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::ThrottlingException]
  # @return [ThrottlingException] a new instance of ThrottlingException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#191
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#196
class Aws::Textract::Errors::UnsupportedDocumentException < ::Aws::Textract::Errors::ServiceError
  # @param context [Seahorse::Client::RequestContext]
  # @param message [String]
  # @param data [Aws::Textract::Types::UnsupportedDocumentException]
  # @return [UnsupportedDocumentException] a new instance of UnsupportedDocumentException
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/errors.rb#201
  def initialize(context, message, data = T.unsafe(nil)); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract.rb#55
Aws::Textract::GEM_VERSION = T.let(T.unsafe(nil), String)

# source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#12
module Aws::Textract::Plugins; end

# source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#13
class Aws::Textract::Plugins::Endpoints < ::Seahorse::Client::Plugin
  # source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#89
  def add_handlers(handlers, _config); end
end

# @api private
#
# source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#26
class Aws::Textract::Plugins::Endpoints::Handler < ::Seahorse::Client::Handler
  # @api private
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#27
  def call(context); end

  private

  # @api private
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#46
  def apply_endpoint_headers(context, headers); end

  # @api private
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/plugins/endpoints.rb#57
  def parameters_for_operation(context); end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/resource.rb#12
class Aws::Textract::Resource
  # @option options
  # @param options [{}]
  # @return [Resource] a new instance of Resource
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/resource.rb#16
  def initialize(options = T.unsafe(nil)); end

  # @return [Client]
  #
  # source://aws-sdk-textract//lib/aws-sdk-textract/resource.rb#21
  def client; end
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#11
module Aws::Textract::Types; end

# You aren't authorized to perform the action. Use the Amazon Resource
# Name (ARN) of an authorized user or IAM role to perform the operation.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AccessDeniedException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#18
class Aws::Textract::Types::AccessDeniedException < ::Aws::EmptyStructure; end

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeDocumentRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#59
class Aws::Textract::Types::AnalyzeDocumentRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#60
Aws::Textract::Types::AnalyzeDocumentRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeDocumentResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#87
class Aws::Textract::Types::AnalyzeDocumentResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#88
Aws::Textract::Types::AnalyzeDocumentResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeExpenseRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#121
class Aws::Textract::Types::AnalyzeExpenseRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#122
Aws::Textract::Types::AnalyzeExpenseRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeExpenseResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#138
class Aws::Textract::Types::AnalyzeExpenseResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#139
Aws::Textract::Types::AnalyzeExpenseResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# Used to contain the information detected by an AnalyzeID operation.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeIDDetections AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#163
class Aws::Textract::Types::AnalyzeIDDetections < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#164
Aws::Textract::Types::AnalyzeIDDetections::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeIDRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#175
class Aws::Textract::Types::AnalyzeIDRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#176
Aws::Textract::Types::AnalyzeIDRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/AnalyzeIDResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#200
class Aws::Textract::Types::AnalyzeIDResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#201
Aws::Textract::Types::AnalyzeIDResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# Amazon Textract isn't able to read the document. For more information
# on the document limits in Amazon Textract, see limits.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/BadDocumentException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#210
class Aws::Textract::Types::BadDocumentException < ::Aws::EmptyStructure; end

# A `Block` represents items that are recognized in a document within a
# group of pixels close to each other. The information returned in a
# `Block` object depends on the type of operation. In text detection for
# documents (for example DetectDocumentText), you get information about
# the detected words and lines of text. In text analysis (for example
# AnalyzeDocument), you can also get information about the fields,
# tables, and selection elements that are detected in the document.
#
# An array of `Block` objects is returned by both synchronous and
# asynchronous operations. In synchronous operations, such as
# DetectDocumentText, the array of `Block` objects is the entire set of
# results. In asynchronous operations, such as GetDocumentAnalysis, the
# array is returned over one or more responses.
#
# For more information, see [How Amazon Textract Works][1].
#
#
#
# [1]: https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Block AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#429
class Aws::Textract::Types::Block < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#430
Aws::Textract::Types::Block::SENSITIVE = T.let(T.unsafe(nil), Array)

# The bounding box around the detected page, text, key-value pair,
# table, table cell, or selection element on a document page. The `left`
# (x-coordinate) and `top` (y-coordinate) are coordinates that represent
# the top and left sides of the bounding box. Note that the upper-left
# corner of the image is the origin (0,0).
#
# The `top` and `left` values returned are ratios of the overall
# document page size. For example, if the input image is 700 x 200
# pixels, and the top-left coordinate of the bounding box is 350 x 50
# pixels, the API returns a `left` value of 0.5 (350/700) and a `top`
# value of 0.25 (50/200).
#
# The `width` and `height` values represent the dimensions of the
# bounding box as a ratio of the overall document page dimension. For
# example, if the document page size is 700 x 200 pixels, and the
# bounding box width is 70 pixels, the width returned is 0.1.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/BoundingBox AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#477
class Aws::Textract::Types::BoundingBox < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#478
Aws::Textract::Types::BoundingBox::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DetectDocumentTextRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#496
class Aws::Textract::Types::DetectDocumentTextRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#497
Aws::Textract::Types::DetectDocumentTextRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DetectDocumentTextResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#519
class Aws::Textract::Types::DetectDocumentTextResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#520
Aws::Textract::Types::DetectDocumentTextResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# A structure that holds information regarding a detected signature on a
# page.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DetectedSignature AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#534
class Aws::Textract::Types::DetectedSignature < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#535
Aws::Textract::Types::DetectedSignature::SENSITIVE = T.let(T.unsafe(nil), Array)

# The input document, either as bytes or as an S3 object.
#
# You pass image bytes to an Amazon Textract API operation by using the
# `Bytes` property. For example, you would use the `Bytes` property to
# pass a document loaded from a local file system. Image bytes passed by
# using the `Bytes` property must be base64 encoded. Your code might not
# need to encode document file bytes if you're using an AWS SDK to call
# Amazon Textract API operations.
#
# You pass images stored in an S3 bucket to an Amazon Textract API
# operation by using the `S3Object` property. Documents stored in an S3
# bucket don't need to be base64 encoded.
#
# The AWS Region for the S3 bucket that contains the S3 object must
# match the AWS Region that you use for Amazon Textract operations.
#
# If you use the AWS CLI to call Amazon Textract operations, passing
# image bytes using the Bytes property isn't supported. You must first
# upload the document to an Amazon S3 bucket, and then call the
# operation using the S3Object property.
#
# For Amazon Textract to process an S3 object, the user must have
# permission to access the S3 object.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Document AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#581
class Aws::Textract::Types::Document < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#582
Aws::Textract::Types::Document::SENSITIVE = T.let(T.unsafe(nil), Array)

# Summary information about documents grouped by the same document type.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DocumentGroup AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#617
class Aws::Textract::Types::DocumentGroup < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#618
Aws::Textract::Types::DocumentGroup::SENSITIVE = T.let(T.unsafe(nil), Array)

# The Amazon S3 bucket that contains the document to be processed. It's
# used by asynchronous operations.
#
# The input document can be an image file in JPEG or PNG format. It can
# also be a file in PDF format.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DocumentLocation AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#635
class Aws::Textract::Types::DocumentLocation < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#636
Aws::Textract::Types::DocumentLocation::SENSITIVE = T.let(T.unsafe(nil), Array)

# Information about the input document.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DocumentMetadata AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#649
class Aws::Textract::Types::DocumentMetadata < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#650
Aws::Textract::Types::DocumentMetadata::SENSITIVE = T.let(T.unsafe(nil), Array)

# The document can't be processed because it's too large. The maximum
# document size for synchronous operations 10 MB. The maximum document
# size for asynchronous operations is 500 MB for PDF files.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/DocumentTooLargeException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#660
class Aws::Textract::Types::DocumentTooLargeException < ::Aws::EmptyStructure; end

# Returns the kind of currency detected.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ExpenseCurrency AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#701
class Aws::Textract::Types::ExpenseCurrency < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#702
Aws::Textract::Types::ExpenseCurrency::SENSITIVE = T.let(T.unsafe(nil), Array)

# An object used to store information about the Value or Label detected
# by Amazon Textract.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ExpenseDetection AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#728
class Aws::Textract::Types::ExpenseDetection < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#729
Aws::Textract::Types::ExpenseDetection::SENSITIVE = T.let(T.unsafe(nil), Array)

# The structure holding all the information returned by AnalyzeExpense
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ExpenseDocument AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#760
class Aws::Textract::Types::ExpenseDocument < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#761
Aws::Textract::Types::ExpenseDocument::SENSITIVE = T.let(T.unsafe(nil), Array)

# Breakdown of detected information, seperated into the catagories Type,
# LabelDetection, and ValueDetection
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ExpenseField AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#805
class Aws::Textract::Types::ExpenseField < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#806
Aws::Textract::Types::ExpenseField::SENSITIVE = T.let(T.unsafe(nil), Array)

# Shows the group that a certain key belongs to. This helps
# differentiate between names and addresses for different organizations,
# that can be hard to determine via JSON response.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ExpenseGroupProperty AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#827
class Aws::Textract::Types::ExpenseGroupProperty < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#828
Aws::Textract::Types::ExpenseGroupProperty::SENSITIVE = T.let(T.unsafe(nil), Array)

# An object used to store information about the Type detected by Amazon
# Textract.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ExpenseType AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#847
class Aws::Textract::Types::ExpenseType < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#848
Aws::Textract::Types::ExpenseType::SENSITIVE = T.let(T.unsafe(nil), Array)

# Contains information extracted by an analysis operation after using
# StartLendingAnalysis.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Extraction AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#874
class Aws::Textract::Types::Extraction < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#875
Aws::Textract::Types::Extraction::SENSITIVE = T.let(T.unsafe(nil), Array)

# Information about where the following items are located on a document
# page: detected page, text, key-value pairs, tables, table cells, and
# selection elements.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Geometry AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#897
class Aws::Textract::Types::Geometry < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#898
Aws::Textract::Types::Geometry::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetDocumentAnalysisRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#927
class Aws::Textract::Types::GetDocumentAnalysisRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#928
Aws::Textract::Types::GetDocumentAnalysisRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetDocumentAnalysisResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#974
class Aws::Textract::Types::GetDocumentAnalysisResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#975
Aws::Textract::Types::GetDocumentAnalysisResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetDocumentTextDetectionRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1004
class Aws::Textract::Types::GetDocumentTextDetectionRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1005
Aws::Textract::Types::GetDocumentTextDetectionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetDocumentTextDetectionResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1051
class Aws::Textract::Types::GetDocumentTextDetectionResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1052
Aws::Textract::Types::GetDocumentTextDetectionResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetExpenseAnalysisRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1081
class Aws::Textract::Types::GetExpenseAnalysisRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1082
Aws::Textract::Types::GetExpenseAnalysisRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetExpenseAnalysisResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1129
class Aws::Textract::Types::GetExpenseAnalysisResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1130
Aws::Textract::Types::GetExpenseAnalysisResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetLendingAnalysisRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1158
class Aws::Textract::Types::GetLendingAnalysisRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1159
Aws::Textract::Types::GetLendingAnalysisRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetLendingAnalysisResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1205
class Aws::Textract::Types::GetLendingAnalysisResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1206
Aws::Textract::Types::GetLendingAnalysisResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetLendingAnalysisSummaryRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1219
class Aws::Textract::Types::GetLendingAnalysisSummaryRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1220
Aws::Textract::Types::GetLendingAnalysisSummaryRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/GetLendingAnalysisSummaryResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1258
class Aws::Textract::Types::GetLendingAnalysisSummaryResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1259
Aws::Textract::Types::GetLendingAnalysisSummaryResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# Shows the results of the human in the loop evaluation. If there is no
# HumanLoopArn, the input did not trigger human review.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/HumanLoopActivationOutput AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1284
class Aws::Textract::Types::HumanLoopActivationOutput < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1285
Aws::Textract::Types::HumanLoopActivationOutput::SENSITIVE = T.let(T.unsafe(nil), Array)

# Sets up the human review workflow the document will be sent to if one
# of the conditions is met. You can also set certain attributes of the
# image before review.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/HumanLoopConfig AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1311
class Aws::Textract::Types::HumanLoopConfig < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1312
Aws::Textract::Types::HumanLoopConfig::SENSITIVE = T.let(T.unsafe(nil), Array)

# Allows you to set attributes of the image. Currently, you can declare
# an image as free of personally identifiable information and adult
# content.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/HumanLoopDataAttributes AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1328
class Aws::Textract::Types::HumanLoopDataAttributes < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1329
Aws::Textract::Types::HumanLoopDataAttributes::SENSITIVE = T.let(T.unsafe(nil), Array)

# Indicates you have exceeded the maximum number of active human in the
# loop workflows available
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/HumanLoopQuotaExceededException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1353
class Aws::Textract::Types::HumanLoopQuotaExceededException < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1354
Aws::Textract::Types::HumanLoopQuotaExceededException::SENSITIVE = T.let(T.unsafe(nil), Array)

# A `ClientRequestToken` input parameter was reused with an operation,
# but at least one of the other input parameters is different from the
# previous call to the operation.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/IdempotentParameterMismatchException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1364
class Aws::Textract::Types::IdempotentParameterMismatchException < ::Aws::EmptyStructure; end

# The structure that lists each document processed in an AnalyzeID
# operation.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/IdentityDocument AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1389
class Aws::Textract::Types::IdentityDocument < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1390
Aws::Textract::Types::IdentityDocument::SENSITIVE = T.let(T.unsafe(nil), Array)

# Structure containing both the normalized type of the extracted
# information and the text associated with it. These are extracted as
# Type and Value respectively.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/IdentityDocumentField AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1410
class Aws::Textract::Types::IdentityDocumentField < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1411
Aws::Textract::Types::IdentityDocumentField::SENSITIVE = T.let(T.unsafe(nil), Array)

# Amazon Textract experienced a service issue. Try your call again.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/InternalServerError AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1419
class Aws::Textract::Types::InternalServerError < ::Aws::EmptyStructure; end

# An invalid job identifier was passed to an asynchronous analysis
# operation.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/InvalidJobIdException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1426
class Aws::Textract::Types::InvalidJobIdException < ::Aws::EmptyStructure; end

# Indicates you do not have decrypt permissions with the KMS key
# entered, or the KMS key was entered incorrectly.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/InvalidKMSKeyException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1433
class Aws::Textract::Types::InvalidKMSKeyException < ::Aws::EmptyStructure; end

# An input parameter violated a constraint. For example, in synchronous
# operations, an `InvalidParameterException` exception occurs when
# neither of the `S3Object` or `Bytes` values are supplied in the
# `Document` request parameter. Validate your parameter before calling
# the API operation again.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/InvalidParameterException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1443
class Aws::Textract::Types::InvalidParameterException < ::Aws::EmptyStructure; end

# Amazon Textract is unable to access the S3 object that's specified in
# the request. for more information, [Configure Access to Amazon S3][1]
# For troubleshooting information, see [Troubleshooting Amazon S3][2]
#
#
#
# [1]: https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html
# [2]: https://docs.aws.amazon.com/AmazonS3/latest/dev/troubleshooting.html
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/InvalidS3ObjectException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1456
class Aws::Textract::Types::InvalidS3ObjectException < ::Aws::EmptyStructure; end

# The results extracted for a lending document.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LendingDetection AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1486
class Aws::Textract::Types::LendingDetection < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1487
Aws::Textract::Types::LendingDetection::SENSITIVE = T.let(T.unsafe(nil), Array)

# Holds the structured data returned by AnalyzeDocument for lending
# documents.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LendingDocument AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1506
class Aws::Textract::Types::LendingDocument < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1507
Aws::Textract::Types::LendingDocument::SENSITIVE = T.let(T.unsafe(nil), Array)

# Holds the normalized key-value pairs returned by AnalyzeDocument,
# including the document type, detected text, and geometry.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LendingField AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1531
class Aws::Textract::Types::LendingField < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1532
Aws::Textract::Types::LendingField::SENSITIVE = T.let(T.unsafe(nil), Array)

# Contains the detections for each page analyzed through the Analyze
# Lending API.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LendingResult AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1557
class Aws::Textract::Types::LendingResult < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1558
Aws::Textract::Types::LendingResult::SENSITIVE = T.let(T.unsafe(nil), Array)

# Contains information regarding DocumentGroups and
# UndetectedDocumentTypes.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LendingSummary AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1577
class Aws::Textract::Types::LendingSummary < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1578
Aws::Textract::Types::LendingSummary::SENSITIVE = T.let(T.unsafe(nil), Array)

# An Amazon Textract service limit was exceeded. For example, if you
# start too many asynchronous jobs concurrently, calls to start
# operations (`StartDocumentTextDetection`, for example) raise a
# LimitExceededException exception (HTTP status code: 400) until the
# number of concurrently running jobs is below the Amazon Textract
# service limit.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LimitExceededException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1591
class Aws::Textract::Types::LimitExceededException < ::Aws::EmptyStructure; end

# A structure that holds information about the different lines found in
# a document's tables.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LineItemFields AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1604
class Aws::Textract::Types::LineItemFields < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1605
Aws::Textract::Types::LineItemFields::SENSITIVE = T.let(T.unsafe(nil), Array)

# A grouping of tables which contain LineItems, with each table
# identified by the table's `LineItemGroupIndex`.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/LineItemGroup AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1626
class Aws::Textract::Types::LineItemGroup < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1627
Aws::Textract::Types::LineItemGroup::SENSITIVE = T.let(T.unsafe(nil), Array)

# Contains information relating to dates in a document, including the
# type of value, and the value.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/NormalizedValue AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1646
class Aws::Textract::Types::NormalizedValue < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1647
Aws::Textract::Types::NormalizedValue::SENSITIVE = T.let(T.unsafe(nil), Array)

# The Amazon Simple Notification Service (Amazon SNS) topic to which
# Amazon Textract publishes the completion status of an asynchronous
# document operation.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/NotificationChannel AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1669
class Aws::Textract::Types::NotificationChannel < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1670
Aws::Textract::Types::NotificationChannel::SENSITIVE = T.let(T.unsafe(nil), Array)

# Sets whether or not your output will go to a user created bucket. Used
# to set the name of the bucket, and the prefix on the output file.
#
# `OutputConfig` is an optional parameter which lets you adjust where
# your output will be placed. By default, Amazon Textract will store the
# results internally and can only be accessed by the Get API operations.
# With `OutputConfig` enabled, you can set the name of the bucket the
# output will be sent to the file prefix of the results where you can
# download your results. Additionally, you can set the `KMSKeyID`
# parameter to a customer master key (CMK) to encrypt your output.
# Without this parameter set Amazon Textract will encrypt server-side
# using the AWS managed CMK for Amazon S3.
#
# Decryption of Customer Content is necessary for processing of the
# documents by Amazon Textract. If your account is opted out under an AI
# services opt out policy then all unencrypted Customer Content is
# immediately and permanently deleted after the Customer Content has
# been processed by the service. No copy of of the output is retained by
# Amazon Textract. For information about how to opt out, see [ Managing
# AI services opt-out policy. ][1]
#
# For more information on data privacy, see the [Data Privacy FAQ][2].
#
#
#
# [1]: https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html
# [2]: https://aws.amazon.com/compliance/data-privacy-faq/
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/OutputConfig AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1715
class Aws::Textract::Types::OutputConfig < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1716
Aws::Textract::Types::OutputConfig::SENSITIVE = T.let(T.unsafe(nil), Array)

# The class assigned to a Page object detected in an input document.
# Contains information regarding the predicted type/class of a
# document's page and the page number that the Page object was detected
# on.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/PageClassification AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1739
class Aws::Textract::Types::PageClassification < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1740
Aws::Textract::Types::PageClassification::SENSITIVE = T.let(T.unsafe(nil), Array)

# The X and Y coordinates of a point on a document page. The X and Y
# values that are returned are ratios of the overall document page size.
# For example, if the input document is 700 x 200 and the operation
# returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel
# coordinate on the document page.
#
# An array of `Point` objects, `Polygon`, is returned by
# DetectDocumentText. `Polygon` represents a fine-grained polygon around
# detected text. For more information, see Geometry in the Amazon
# Textract Developer Guide.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Point AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1767
class Aws::Textract::Types::Point < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1768
Aws::Textract::Types::Point::SENSITIVE = T.let(T.unsafe(nil), Array)

# Contains information regarding predicted values returned by Amazon
# Textract operations, including the predicted value and the confidence
# in the predicted value.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Prediction AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1788
class Aws::Textract::Types::Prediction < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1789
Aws::Textract::Types::Prediction::SENSITIVE = T.let(T.unsafe(nil), Array)

# The number of requests exceeded your throughput limit. If you want to
# increase this limit, contact Amazon Textract.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ProvisionedThroughputExceededException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1798
class Aws::Textract::Types::ProvisionedThroughputExceededException < ::Aws::EmptyStructure; end

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/QueriesConfig AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1806
class Aws::Textract::Types::QueriesConfig < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1807
Aws::Textract::Types::QueriesConfig::SENSITIVE = T.let(T.unsafe(nil), Array)

# Each query contains the question you want to ask in the Text and the
# alias you want to associate.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Query AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1848
class Aws::Textract::Types::Query < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1849
Aws::Textract::Types::Query::SENSITIVE = T.let(T.unsafe(nil), Array)

# Information about how blocks are related to each other. A `Block`
# object contains 0 or more `Relation` objects in a list,
# `Relationships`. For more information, see Block.
#
# The `Type` element provides the type of the relationship for all
# blocks in the `IDs` array.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Relationship AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1897
class Aws::Textract::Types::Relationship < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1898
Aws::Textract::Types::Relationship::SENSITIVE = T.let(T.unsafe(nil), Array)

# The S3 bucket name and file name that identifies the document.
#
# The AWS Region for the S3 bucket that contains the document must match
# the Region that you use for Amazon Textract operations.
#
# For Amazon Textract to process a file in an S3 bucket, the user must
# have permission to access the S3 bucket and file.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/S3Object AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1931
class Aws::Textract::Types::S3Object < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1932
Aws::Textract::Types::S3Object::SENSITIVE = T.let(T.unsafe(nil), Array)

# Information regarding a detected signature on a page.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/SignatureDetection AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1953
class Aws::Textract::Types::SignatureDetection < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1954
Aws::Textract::Types::SignatureDetection::SENSITIVE = T.let(T.unsafe(nil), Array)

# Contains information about the pages of a document, defined by logical
# boundary.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/SplitDocument AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1975
class Aws::Textract::Types::SplitDocument < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#1976
Aws::Textract::Types::SplitDocument::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentAnalysisRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2046
class Aws::Textract::Types::StartDocumentAnalysisRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2047
Aws::Textract::Types::StartDocumentAnalysisRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentAnalysisResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2060
class Aws::Textract::Types::StartDocumentAnalysisResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2061
Aws::Textract::Types::StartDocumentAnalysisResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentTextDetectionRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2116
class Aws::Textract::Types::StartDocumentTextDetectionRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2117
Aws::Textract::Types::StartDocumentTextDetectionRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartDocumentTextDetectionResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2131
class Aws::Textract::Types::StartDocumentTextDetectionResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2132
Aws::Textract::Types::StartDocumentTextDetectionResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartExpenseAnalysisRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2187
class Aws::Textract::Types::StartExpenseAnalysisRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2188
Aws::Textract::Types::StartExpenseAnalysisRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartExpenseAnalysisResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2201
class Aws::Textract::Types::StartExpenseAnalysisResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2202
Aws::Textract::Types::StartExpenseAnalysisResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartLendingAnalysisRequest AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2287
class Aws::Textract::Types::StartLendingAnalysisRequest < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2288
Aws::Textract::Types::StartLendingAnalysisRequest::SENSITIVE = T.let(T.unsafe(nil), Array)

# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/StartLendingAnalysisResponse AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2301
class Aws::Textract::Types::StartLendingAnalysisResponse < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2302
Aws::Textract::Types::StartLendingAnalysisResponse::SENSITIVE = T.let(T.unsafe(nil), Array)

# Amazon Textract is temporarily unable to process the request. Try your
# call again.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/ThrottlingException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2311
class Aws::Textract::Types::ThrottlingException < ::Aws::EmptyStructure; end

# A structure containing information about an undetected signature on a
# page where it was expected but not found.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/UndetectedSignature AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2323
class Aws::Textract::Types::UndetectedSignature < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2324
Aws::Textract::Types::UndetectedSignature::SENSITIVE = T.let(T.unsafe(nil), Array)

# The format of the input document isn't supported. Documents for
# operations can be in PNG, JPEG, PDF, or TIFF format.
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/UnsupportedDocumentException AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2333
class Aws::Textract::Types::UnsupportedDocumentException < ::Aws::EmptyStructure; end

# A warning about an issue that occurred during asynchronous text
# analysis (StartDocumentAnalysis) or asynchronous document text
# detection (StartDocumentTextDetection).
#
# @see http://docs.aws.amazon.com/goto/WebAPI/textract-2018-06-27/Warning AWS API Documentation
#
# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2351
class Aws::Textract::Types::Warning < ::Struct
  include ::Aws::Structure
end

# source://aws-sdk-textract//lib/aws-sdk-textract/types.rb#2352
Aws::Textract::Types::Warning::SENSITIVE = T.let(T.unsafe(nil), Array)
