"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Book implements Node {
  authorName: String!

  """ID of the object."""
  id: ID!
  snaps: [Snap!]!
  title: String!
  url: String!
}

"""Autogenerated input type of CreateBook"""
input CreateBookInput {
  authorName: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  title: String!
}

"""Autogenerated return type of CreateBook."""
type CreateBookPayload {
  book: Book

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
}

"""Autogenerated input type of CreateSnap"""
input CreateSnapInput {
  bookId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  photo: ImageInput!
}

"""Autogenerated return type of CreateSnap."""
type CreateSnapPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  snap: Snap
  success: Boolean!
}

"""An ISO 8601-encoded date"""
scalar Date

"""An ISO 8601-encoded datetime"""
scalar DateTime

type Image implements Node {
  """ID of the object."""
  id: ID!
  signedId: String!
  url(size: ImageSize = MD): String!
}

input ImageInput {
  signedId: String!
}

enum ImageSize {
  LG
  MD
  SM
}

type InputFieldError {
  field: String!
  message: String!
}

type Mutation {
  createBook(
    """Parameters for CreateBook"""
    input: CreateBookInput!
  ): CreateBookPayload!
  createSnap(
    """Parameters for CreateSnap"""
    input: CreateSnapInput!
  ): CreateSnapPayload!
  testMutation(
    """Parameters for TestMutation"""
    input: TestMutationInput!
  ): TestMutationPayload!
  updateBook(
    """Parameters for UpdateBook"""
    input: UpdateBookInput!
  ): UpdateBookPayload!
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type Query {
  activityStatus: String
  announcement: String
  book(id: ID!): Book

  """When the server was booted."""
  bootedAt: DateTime!
  contactEmail: String!
  imageBySignedId(signedId: String!): Image
  passwordStrength(password: String!): Float!
  testEcho(text: String): String!
  user(id: ID!): User
  viewer: User
}

type Snap implements Node {
  book: Book!

  """ID of the object."""
  id: ID!
  photo: Image!
  text: String
}

type Subscription {
  activityStatus: String
  testSubscription: Int!
}

type TestModel {
  birthday: Date
  id: ID!
  name: String!
}

"""Autogenerated input type of TestMutation"""
input TestMutationInput {
  birthday: Date

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  name: String!
}

"""Autogenerated return type of TestMutation."""
type TestMutationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  model: TestModel
  success: Boolean!
}

"""Autogenerated input type of UpdateBook"""
input UpdateBookInput {
  authorName: String!
  bookId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  title: String!
}

"""Autogenerated return type of UpdateBook."""
type UpdateBookPayload {
  book: Book

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [InputFieldError!]
  success: Boolean!
  user: User
}

type User implements Node {
  avatarUrl: String
  books: [Book!]!
  email: String!
  firstName: String!

  """ID of the object."""
  id: ID!
  initials: String!
  isAdmin: Boolean!
  lastName: String
  name: String!
}